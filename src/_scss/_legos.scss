/*--------------------------------------------------------------
Mixins
--------------------------------------------------------------*/

/*--------
Responsive
--------*/

@mixin respond-to($min-width, $max-width: false, $ie: true) {
  @if $min-width {
    @if map-has-key($breakpoints, $min-width) {
      $min-width: map-get($breakpoints, $min-width);
    }

    @media screen and (min-width: #{$min-width}) {
      @if $max-width {
        @media (max-width: $max-width) {
          @content;
        }
      } @else {
        @content;
      }
    }

    @if $ie {
      .lt-ie9 & {
        @content;
      }
    }
  } @else {
    @if map-has-key($breakpoints, $max-width) {
      $max-width: map-get($breakpoints, $max-width);
    }

    @media screen and (max-width: #{$max-width}) {
      @content;
    }
  }
}

@mixin retina() {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
    @content;
  }
}

// http://davidensinger.com/2013/03/using-rems-with-sass/

@mixin rem($property, $values) {
  $px-values: ();
  $rem-values: ();

  @each $value in $values {
    @if $value == 0 or $value == 0px {
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      $new-rem-value: $value / $base;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      $px-values: join($px-values, round($value * $base));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  #{$property}: $px-values;
  #{$property}: $rem-values;
}

/*--------
Typography
--------*/

@function ems($size, $context: $base) {
  @return ($size / $context) * 1em;
}

@function rems($size, $context: $base) {
  @return ($size / $context) * 1rem;
}

// http://maketea.co.uk/2014/11/05/managing-responsive-typography-with-sass.html

@function breakpoint($breakpoint-name) {
  $breakpoint-value: map-get($breakpoints, $breakpoint-name);

  @if $breakpoint-value {
    @return $breakpoint-value;
  }

  @warn "Breakpoint '#{$breakpoint-name}' not found in $breakpoints";
}

@function text-breakpoints-for($text-size) {
  $text-breakpoints: map-get($typography, $text-size);

  @if $text-breakpoints {
    @return $text-breakpoints;
  }

  @warn "Text size '#{$text-size}' not found in $typography";
}

@function text-properties-for($text-size, $breakpoint-name) {
  $text-breakpoints: text-breakpoints-for($text-size);
  $text-properties: map-get($text-breakpoints, $breakpoint-name);

  @if $text-properties {
    @return $text-properties;
  }

  @warn "Breakpoint '#{$breakpoint-name}' for text size '#{$text-size}' was not found";
}

@function get-base-settings($breakpoint, $property) {
  $base-breakpoints: text-breakpoints-for('base');
  $breakpoint: map-get($base-breakpoints, $breakpoint);
  $base-size: map-get($breakpoint, $property);

  @if $base-size {
    @return $base-size;
  }

  @warn "Base size for breakpoint '#{$breakpoint}' was not found";
}

@mixin text-size($text-size, $breakpoint-name: 'small') {
  $text-size-properties: text-properties-for($text-size, $breakpoint-name);
  $baseline: get-base-settings($breakpoint-name, 'font-size');

  @if $text-size-properties {
    font-size: ems(map-get($text-size-properties, 'font-size'), $baseline);
    line-height: map-get($text-size-properties, 'line-height');
  }
}

@mixin typeset($text-size, $default-breakpoint: 'small') {
  @include text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint {
      $breakpoint: breakpoint($breakpoint-name);
      @include respond-to($breakpoint) {
        @include text-size($text-size, $breakpoint-name);
      }
    }
  }
}

@mixin get-vertical-rhythm($property, $values, $breakpoint-name) {
  $px-values: ();
  $rem-values: ();

  @if map-has-key(text-breakpoints-for('base'), $breakpoint-name) {
    $base-size: get-base-settings($breakpoint-name, 'font-size');
    $baseline: get-base-settings($breakpoint-name, 'line-height');

    @each $value in $values {
      @if $value == 0 or $value == 0px {
        $px-values: join($px-values, 0);
        $rem-values: join($rem-values, 0);
      } @else {
        $new-rem-value: $value * $baseline;
        $px-values: join($px-values, round($base-size * $baseline * $value));
        $rem-values: join($rem-values, #{$new-rem-value}rem);
      }
    }

    #{$property}: $px-values;
    #{$property}: $rem-values;
  }
}

@mixin vertical-rhythm($property, $values, $default-breakpoint: 'small') {
  $breakpoint-map: map-keys($breakpoints);

  @each $breakpoint-name in $breakpoint-map {
    $breakpoint: breakpoint($breakpoint-name);

    @if $breakpoint-name == $default-breakpoint {
      @include get-vertical-rhythm($property, $values, $breakpoint-name);
    } @else {
      @include respond-to($breakpoint, $ie: false) {
        @include get-vertical-rhythm($property, $values, $breakpoint-name);
      }
      
    }
  }
}

@mixin base-copy {
  font-family: $serif;
  font-weight: $weight-light;
}

@mixin heading-copy {
  font-family: $sans-serif; 
  font-weight: $weight-medium;
}

/*----
Layout
----*/

@mixin clearfix {
  & {
    *zoom: 1;
  }
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/*--------------------------------------------------------------
Functions
--------------------------------------------------------------*/

@function column($num, $grid-columns) {
  $column: percentage(1 / $grid-columns);

  @if ($num == 1) {
    @return $column;
  }

  @return $column * $num;
}

/*--------------------------------------------------------------
Placeholders
--------------------------------------------------------------*/

%remove-select-default {
  background: transparent;
  border: none;
  border-radius: 0;
  outline: 0;
  text-indent: 0.01px;
  text-overflow: '';
  -moz-appearance: none;
  -webkit-appearance: none;
  -webkit-user-select: none;
}

%visually-hidden { /*http://developer.yahoo.com/blogs/ydn/posts/2012/10/clip-your-hidden-content-for-better-accessibility/*/
  position: absolute !important;
  clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  padding:0 !important;
  border:0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden;
}

%truncate {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

/*--------------------------------------------------------------
Reduce, reuse, recycle
--------------------------------------------------------------*/

.is-hidden { display: none; }

.is-mobile-hidden {
  @include respond-to(false, 599px) {
    display: none;
  }
}

.is-desktop-hidden {
  @include respond-to(600px) {
    display: none;
  }
}